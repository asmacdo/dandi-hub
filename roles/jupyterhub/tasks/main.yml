---
- name: include HACK VARS
  ansible.builtin.include_vars:
    file: todo.yml

# configure and create jupyterhub
- name: Create security token
  command: openssl rand -hex 32
  register: os

- name: Set namespace dir for Jupyterhub
  set_fact:
    jupyterhub_working_dir: "{{ user_home }}/{{ namespace }}"

- name: Ensure namespace dir exists
  file:
    path: "{{ jupyterhub_working_dir }}"
    recurse: true
    state: directory

- name: Create config file for JupyterHub
  template:
    src: config.yaml.j2
    dest: "{{ jupyterhub_working_dir }}/config.yaml"

# Helm installed by previous to add aks repo. separate?
# - name: Download and extract Helm tarball
#   ansible.builtin.unarchive:
#     src: https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
#     dest: /tmp/
#     remote_src: yes
#
# - name: Install Helm
#   ansible.builtin.copy:
#     remote_src=True
#     src=/tmp/linux-amd64/helm
#     dest=/usr/local/bin/helm
#     mode=+x

# From repository
- name: Add JupyterHub Helm Chart repo
  kubernetes.core.helm_repository:
    name: "{{ helm_chart_repo_name }}"
    repo_url: "{{ helm_chart_repo_url }}"

- name: Separately update the repository cache
  kubernetes.core.helm:
    name: dummy
    namespace: kube-system
    state: absent
    update_repo_cache: true

- name: Install Jupyterhub helm chart
  kubernetes.core.helm:
    name: "{{ namespace }}-jupyterhub"
    chart_ref: "{{ helm_chart_repo_name }}/jupyterhub"
    release_namespace: "{{ namespace }}"
    values_files:
      - "{{ jupyterhub_working_dir }}/config.yaml"
    update_repo_cache: true
    create_namespace: true
  become: yes

- debug:
    msg: "{{ kubeconfig }}"

# (I think) This currently doesn't work in a Kind cluster, which only exposes a single port and cant be used this way.
# (Whats happening) The LoadBalancer.EXTERNAL_IP is stuck at `pending` and no events occur.
# This command will make the svc accessible on localhost:8001
# `kubectl port-forward svc/proxy-public 8001:https --kubeconfig /home/austin/.kube/config-molecule-test -n dandihub`
- name: Get URL for public proxy
  command: kubectl --namespace={{ namespace }} --kubeconfig {{ kubeconfig }} describe svc proxy-public
  register: pp_log
  until: pp_log.stdout.find('Ensured load balancer') != -1
  retries: 10
  delay: 60
  become: yes

- debug:
    msg: "{{pp_log}}"

- debug: msg="Navigate browser to {{ pp_log.stdout_lines[20] }} to begin using JupyterHub!"
