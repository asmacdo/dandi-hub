---
- name: include HACK VARS
  ansible.builtin.include_vars:
    file: todo.yml

# configure and create jupyterhub
- name: Create security token
  command: openssl rand -hex 32
  register: os

- name: Set namespace dir for Jupyterhub
  set_fact:
    jupyterhub_working_dir: "{{ user_home }}/{{ namespace }}"

- name: Ensure namespace dir exists
  file:
    path: "{{ jupyterhub_working_dir }}"
    recurse: true
    state: directory

- name: Create config file for JupyterHub
  template:
    src: config.yaml.j2
    dest: "{{ jupyterhub_working_dir }}/config.yaml"

# Helm installed by previous to add aks repo. separate?
# - name: Download and extract Helm tarball
#   ansible.builtin.unarchive:
#     src: https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
#     dest: /tmp/
#     remote_src: yes
#
# - name: Install Helm
#   ansible.builtin.copy:
#     remote_src=True
#     src=/tmp/linux-amd64/helm
#     dest=/usr/local/bin/helm
#     mode=+x

# From repository
- name: Add JupyterHub Helm Chart repo
  kubernetes.core.helm_repository:
    name: "{{ helm_chart_repo_name }}"
    repo_url: "{{ helm_chart_repo_url }}"

- name: Separately update the repository cache
  kubernetes.core.helm:
    name: "{{ namespace }}-jupyterhub"
    namespace: "{{ namespace }}"
    chart_ref: "{{ helm_chart_repo_name }}/jupyterhub"
    values_files: "
      - {{ jupyterhub_working_dir }}/config.yaml"
    update_repo_cache: true

# - name: Update Helm chart repos
#   command: helm repo update
#   args:
#     chdir: /home/ec2-user/{{ namespace }}

# - name: Check for JupyterHub helm release
#   command: helm list
#   register: hl_log
#   changed_when: False
#
# - name: Install JupyterHub release
#   shell: helm install {{ namespace }}-jupyterhub {{ helm_chart_repo_name }}/jupyterhub \
#     --debug \
#     --version={{ jupyterhub_chart_version }} \
#     --namespace={{ namespace }} \
#     --timeout=10m
#     -f config.yaml
#   args:
#     chdir: /home/ec2-user/{{ namespace }}
#   when: hl_log.stdout.find(namespace + '-jupyterhub') == -1
#
# ## Wait for proxy to spin up ##
# - name: sleep for 30 seconds and continue with play
#   wait_for: timeout=30
#   delegate_to: localhost
#
# - name: Get URL for public proxy
#   command: kubectl --namespace={{ namespace }} describe svc proxy-public
#   register: pp_log
#   until: pp_log.stdout.find('Ensured load balancer') != -1
#   retries: 10
#   delay: 60
#
# - debug: msg="Navigate browser to {{ pp_log.stdout_lines[20] }} to begin using JupyterHub!"
